/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const TermsLazyImport = createFileRoute('/terms')()
const RoadmapLazyImport = createFileRoute('/roadmap')()
const PrivacyPolicyLazyImport = createFileRoute('/privacy-policy')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const TermsLazyRoute = TermsLazyImport.update({
  path: '/terms',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/terms.lazy').then((d) => d.Route))

const RoadmapLazyRoute = RoadmapLazyImport.update({
  path: '/roadmap',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/roadmap.lazy').then((d) => d.Route))

const PrivacyPolicyLazyRoute = PrivacyPolicyLazyImport.update({
  path: '/privacy-policy',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/privacy-policy.lazy').then((d) => d.Route),
)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/privacy-policy': {
      preLoaderRoute: typeof PrivacyPolicyLazyImport
      parentRoute: typeof rootRoute
    }
    '/roadmap': {
      preLoaderRoute: typeof RoadmapLazyImport
      parentRoute: typeof rootRoute
    }
    '/terms': {
      preLoaderRoute: typeof TermsLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexLazyRoute,
  PrivacyPolicyLazyRoute,
  RoadmapLazyRoute,
  TermsLazyRoute,
])

/* prettier-ignore-end */
